heat_template_version: 2013-05-23

description: Simple template to deploy a single compute instance with a volume attached

parameters:
  key_name:
    type: string
    description: Name of a KeyPair
  vm_name:
    type: string
    label: VM name
  image_id:
    type: string
    label: Image ID
    description: Image to be used for compute instance
  flavor:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used
    default: small.bronze
  availability_zone:
    type: string
    description: The Availability Zone to launch the instance.
    default: nova
  volume_size:
    type: number
    description: Size of the volume to be created.
    default: 1
  mountpoint:
    type: string
    description: The directory to provide to the user
    default: /mnt/workingdir
  volume_type:
    type: string
    description: Type of volume to be used (encrypted or not)
    default: ""
  scheduler_hints:
    type: string
    description: The Host Aggregate to launch the instance in form of '{host:myhost}'.
    default: nova
  security_groups:
    type: comma_delimited_list
    description: List of security group names or IDs
    default: [allow_all]
  networks:
    type: json
    description: ID of public (sub) network into which servers get deployed

resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      name: { get_param: vm_name }
      key_name: { get_param: key_name }
      image: { get_param: image_id }
      availability_zone: { get_param: availability_zone }
      flavor: { get_param: flavor }
      networks: { get_param: networks }
      security_groups: { get_param: security_groups }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v

            # Configure the network interfaces, if needed
            interfaces=$(ip link show | grep -Eo "[1-9]: [a-z0-9]+:" | grep -Ev "(lo|eth0)" | cut -d: -f2)

            for i in ${interfaces[@]}; do
                if [ -e /etc/network/interfaces.d/eth0.cfg ]; then
                   sed "s/eth0/$i/g" /etc/network/interfaces.d/eth0.cfg  > /etc/network/interfaces.d/$i.cfg
                fi
                ifdown $i; ifup $i
            done

            #Allow user to use volume
            voldata_id=volume_id
            voldata_dev="/dev/disk/by-id/virtio-$(echo ${voldata_id} | cut -c -20)"
            mkdir -p mountpoint
            mkfs.ext4 ${voldata_dev} && mount ${voldata_dev} mountpoint
            echo "Successfully device mounted"

            #For reboot instance
            echo "${voldata_dev} mountpoint ext4 defaults 0 0" >> /etc/fstab

          params:
            mountpoint: { get_param: mountpoint }
            volume_id:  { get_resource: cinder_volume }
  cinder_volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      availability_zone: { get_param: availability_zone }
      volume_type: { get_param: volume_type }
  
  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: cinder_volume }
      instance_uuid: { get_resource: my_instance }
      mountpoint: null
      volume_id:
        get_resource: cinder_volume

outputs:
  instance_id:
    description: Resource ID assigned to the newly created instance
    value: { get_resource: my_instance }

  instance_ips:
    description: The IP address of the deployed instance
    value: { get_attr: [my_instance, networks] }

  endpoints:
    description: "Service endpoints"
    value:
      "ssh":
        str_replace:
          params:
            host: { get_attr: [my_instance, first_address] }
          template: "ssh://host:22"