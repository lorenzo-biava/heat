heat_template_version: 2013-05-23

description: Template to deploy a single user data instance (PostgreSQL 9.3 + PHPPgAdmin + change data directory)

parameters:
  key_name:
    type: string
    description: Name of a KeyPair
  vm_name:
    type: string
    label: VM name
  image_id:
    type: string
    label: Image ID
    description: ID of the image to be used for compute instance
    constraints:
       - allowed_values: [PRISMA-Ubuntu-14.04-x86_64]
    default: PRISMA-Ubuntu-14.04-x86_64
  instance_type:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used
    default: small.bronze
  availability_zone:
    type: string
    description: The Availability Zone to launch the instance.
    default: nova
  scheduler_hints:
    type: string
    description: The Host Aggregate to launch the instance in form of '{host:myhost}'.
    default: nova
  security_groups:
    type: comma_delimited_list
    description: List of security group names or IDs
    default:
       - allow_all
  net_id:
    type: string
    description: ID of public (or private) sub network into which servers get deployed
  db_name:
    type: string
    constraints: 
      - 
        length: 
          max: 64
          min: 4
      - 
        allowed_pattern: "[a-zA-Z0-9-_]*"
    description: "db_name must contain only alphanumeric characters or _ or -"
    default: tempdatabase
  db_username: 
    constraints: 
      - 
        length: 
          max: 16
          min: 3
      - 
        allowed_pattern: "[a-zA-Z][a-zA-Z0-9]*"
        description: "db_username must begin with a letter and contain only alphanumeric characters"
    default: admin
    description: "Database admin account username"
    hidden: true
    type: string
  db_password: 
    constraints: 
      - 
        description: "admin account password  must be between 5 and 41 characters"
        length: 
          max: 41
          min: 5
      - 
        allowed_pattern: "[a-zA-Z0-9]*"
        description: "db_password must contain only alphanumeric characters"
    default: admin
    description: "Database admin account password"
    hidden: true
    type: string
  db_root_password: 
    constraints: 
      - 
        description: "root password must be between 4 and 41 characters"
        length: 
          max: 41
          min: 4
      - 
        allowed_pattern: "[a-zA-Z0-9]*"
        description: "db_password must contain only alphanumeric characters"
    default: admin
    description: "Root password for PostgreSQL"
    hidden: true
    type: string
  volume_size: 
    constraints: 
      - 
        description: "must be between 1 and 1024 Gb."
        range: 
          max: 1024
          min: 1
    default: 1
    description: "Size of the volume to be created."
    type: number
  device_name:
    type: string
    description: Device name used by Openstack,not vda or vda1
    constraints:
     - allowed_values: [ /dev/vdb ]
    default: /dev/vdb
  mountpoint:
    type: string
    description: The directory to provide to the user
    default: /mnt/workingdir
  volume_type:
    type: string
    description: Type of volume to be used (encrypted or not)
    default: data
  port1:
    type: string
    description: port for Apache
    default: 80
  port2:
    type: string
    description: port for PostgreSQL
    default: 5432

resources:
  user_data_instance:
    type: OS::Nova::Server
    properties:
      name: { get_param: vm_name }
      key_name: { get_param: key_name }
      image: { get_param: image_id }
      availability_zone: { get_param: availability_zone }
      flavor: { get_param: instance_type }
      networks:
        - port: { get_resource: user_data_instance_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v
            # An error exit function
            function error_exit
            { 
             echo "$1" 1>&2 
             exit 1
            }
            useradd -s /bin/bash -m postgres
            echo "postgres:db_rootpassword" | chpasswd
            echo 'postgres ALL=(ALL) ALL' | sudo tee -a /etc/sudoers
            sed -i "s:^127.0.0.1:127.0.0.1 $HOSTNAME:" /etc/hosts
            apt-get update
            apt-get install -y openssh-server openssl bash libssl1.0.0
            #Install PostgreSQL  
            echo "deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main" >> /etc/apt/sources.list
            wget --quiet -O - http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add -
            apt-get install -y postgresql-9.3 postgresql-contrib
            # Configure Postgres Remote Access
            sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" /etc/postgresql/9.3/main/postgresql.conf
            echo "host    all             all             0.0.0.0/0               md5" | tee -a /etc/postgresql/9.3/main/pg_hba.conf
            sudo service postgresql restart
            sudo service postgresql stop
            #Allow user to use volume
            mkdir -p mountpoint/data  
            mkfs.ext4 device_name
            if [ $? -eq 0 ]; then
              mount device_name mountpoint/data
              echo "Successfully device mounted"
              echo 'device_name mountpoint/data ext4 defaults 0 0' >> /etc/fstab
              chmod -R 0700 mountpoint/data
              #Change PostgreSQL default data directory
              sudo pg_dropcluster 9.3 main
              #clean  the directory before create cluster,usually you found lost+found directory
              rm -r -f mountpoint/data/*
              sudo pg_createcluster -d mountpoint/data --start-conf auto 9.3 main
              if [ $? -eq 0 ]; then 
                sudo chown -R postgres:postgres mountpoint/data
                sudo cp -R -p /etc/postgresql/9.3/main mountpoint/data
                ln -s mountpoint/data /etc/postgresql/9.3/main
                sed -i "s:^data_directory.*$:data_directory\t\t= 'mountpoint/data':" /etc/postgresql/9.3/main/postgresql.conf
                sudo service postgresql restart
                # Setup postgres password, create a user and db
                sudo -u postgres psql -c "alter role postgres password 'db_rootpassword';" 
                sudo -u postgres psql -c "create role db_user password 'db_password' SUPERUSER CREATEDB CREATEROLE INHERIT;" 
                sudo -u postgres createdb db_name -O db_user;
                sudo -u postgres psql -c "alter role db_user LOGIN;" 
                # Apache2 installation
                apt-get install -y apache2
                echo "ServerName localhost" | tee /etc/apache2/httpd.conf
                service apache2 restart
                # PHP installation
                apt-get install -q -y php5 libapache2-mod-php5 php5-mcrypt
                # phpPgAdmin installation
                apt-get install -q -y phppgadmin php5-pgsql
                sed -i "s:^allow from 127:#allow from 127:" /etc/apache2/conf.d/phppgadmin 
                sed -i "s/^#.*$allow from all/allow from all/" /etc/apache2/conf.d/phppgadmin
                sudo cp /etc/apache2/conf.d/phppgadmin /etc/apache2/conf-available/phppgadmin.conf
                sed -i "s:^$conf['extra_login_security'].*$:$conf['extra_login_security'] = 'false':" /usr/share/phppgadmin/conf/config.inc.php
                sed -i "s:^post_max_size.*$:post_max_size = 20M:" /etc/php5/apache2/php.ini
                sed -i "s:^upload_max_filesize.*$:upload_max_filesize = 20M:" /etc/php5/apache2/php.ini
                sudo a2enconf phppgadmin
                sudo service apache2 reload
                sudo service apache2 restart
                sudo service postgresql restart
                chmod +x /etc/init.d/apache2
                update-rc.d apache2 defaults
                chmod +x /etc/init.d/postgresql
                update-rc.d postgresql defaults

                echo "---Personalizzo il file di configurazione di Zabbix Agent"
                wget "http://repo.zabbix.com/zabbix/2.2/ubuntu/pool/main/z/zabbix-release/zabbix-release_2.2-1+precise_all.deb"
                dpkg -i zabbix-release_2.2-1+precise_all.deb
                apt-get update
                apt-get install zabbix-agent
                zabbix_metrics="zabbix-metrics.infn.ponsmartcities-prisma.it"
                zabbix_watcher="zabbix-watcher.infn.ponsmartcities-prisma.it"
                sed -i -e "s/^Server=.*/Server=${zabbix_metrics},${zabbix_watcher}/" /etc/zabbix/zabbix_agentd.conf
                sed -i -e "s/^ServerActive=.*/ServerActive=${zabbix_metrics},${zabbix_watcher}/" /etc/zabbix/zabbix_agentd.conf
                sed -i -e "s/^Hostname=.*/Hostname=${HOSTNAME//./_}/" /etc/zabbix/zabbix_agentd.conf
                service zabbix-agent restart
                echo "---Personalizzo il file di configurazione di Puppet Agent"
                puppetMaster="puppet-master.infn.ponsmartcities-prisma.it"
                puppet agent --server $puppetMaster --onetime --no-daemonize --verbose
  
                curl -X PUT -H 'Content-Type:application/json'\
                -d '{"Status" : "SUCCESS","Reason" : "postgres and phpadmin installed OK","UniqueId" : "ID1","Data" : "Server Configuration OK"}' \
               "$wait_handle$"     
              else
                curl -X PUT -H 'Content-Type:application/json'\
               -d '{"Status" : "FAILURE","Reason" : "postgres NOK","UniqueId" : "ID1","Data" : "Server Configuration NOT OK"}' \
               "$wait_handle$"
                error_exit "POSTGRES CLUSTER NOT CREATED" 
               fi
            else
               curl -X PUT -H 'Content-Type:application/json'\
               -d '{"Status" : "FAILURE","Reason" : "Mount Device NOK","UniqueId" : "ID1","Data" : "Server Configuration NOT OK"}' \
             "$wait_handle$"
               error_exit "MOUNT device NOT OK" 
            fi
            exit
          params:
            db_rootpassword: { get_param: db_root_password }
            db_name: { get_param: db_name }
            db_user: { get_param: db_username }
            db_password: { get_param: db_password }
            mountpoint: { get_param: mountpoint }
            device_name: { get_param: device_name }
            $wait_handle$: { get_resource: wait_condition_handle}
    
  wait_condition:
           type: AWS::CloudFormation::WaitCondition
           depends_on: user_data_instance
           properties:
            Count: 1
            Handle: { get_resource: wait_condition_handle }
            Timeout: 600

  wait_condition_handle:
           type: AWS::CloudFormation::WaitConditionHandle

  cinder_volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      availability_zone: { get_param: availability_zone }
      volume_type: { get_param: volume_type }
  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: cinder_volume }
      instance_uuid: { get_resource: user_data_instance }
      mountpoint: { get_param: device_name }
  user_data_instance_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: net_id }
      security_groups: { get_param: security_groups }

outputs: 
  instance_id: 
    description: "Resource ID assigned to the newly created instance"
    value: 
      get_resource: my_instance
  instance_ip: 
    description: "Public IP address of the newly created Nova instance."
    value: 
      get_attr: 
        - my_instance
        - first_address
  manageURL: 
    description: "phpMyAdmin can be accessed at"
    value: 
      str_replace: 
        params: 
          host: 
            get_attr: 
              - my_instance
              - first_address
        template: "http://host/phpmyadmin"
  volume_id: 
    description: "Resource ID assigned to the newly created volume attached to instance"
    value: 
      get_resource: cinder_volume


  vmIp:
    description: The IP address of the deployed instance
    value: { get_attr: [user_data_instance, first_address] }
  vmUuid:
    description: Resource ID assigned to the newly created instance
    value: { get_resource: user_data_instance }
  vmName:
    description: vm name 
    value: { get_param: vm_name }
  serviceType: 
    description: List of services and ports to be monitored 
    value:
      str_replace:
        template: apache:port1, postgresql:port2
        params:
          port1: { get_param: port1 } 
          port2: { get_param: port2 } 
  manageURL: 
    description: phpMyAdmin can be accessed at 
    value:
      str_replace:
        template: http://host/phppgadmin
        params:
          host: { get_attr: [user_data_instance, first_address] } 
  volumeUuid:
    description: Resource ID assigned to the newly created volume attached to instance
    value: { get_resource: cinder_volume }

  data_wait:
         description: The data passed back in the WaitCondition
         value: { get_attr : [ wait_condition, Data ]}
    

