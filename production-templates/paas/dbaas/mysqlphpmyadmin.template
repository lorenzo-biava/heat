heat_template_version: 2013-05-23

description: "Deploy a single compute instance with MySQL + PHPMyAdmin + Volume (symbolic link)"

parameters: 
  key_name:
    type: string
    description: Name of a KeyPair
  vm_name:
    type: string
    label: VM name
  instance_type:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used
    default: small.bronze
  availability_zone:
    type: string
    description: The Availability Zone to launch the instance.
    default: nova
  scheduler_hints:
    type: string
    description: The Host Aggregate to launch the instance in form of '{host:myhost}'.
    default: nova
  security_groups:
    type: comma_delimited_list
    description: List of security group names or IDs
    default: [ dbaas ]
  net_id:
    type: string
    description: ID of public (or private) sub network into which servers get deployed
  db_name: 
    type: string
    constraints: 
      - 
        length: 
          max: 64
          min: 4
      - 
        allowed_pattern: "[a-zA-Z0-9-_]*"
        description: "db_name must contain only alphanumeric characters or _ or -"
    default: tempdatabase
    description: "Database name"
  db_create_user:
    type: string
    label: db_create_user
    description: Flag for db_user creation
    constraints:
      - 
       allowed_values: [create,do_not_create]
  db_username:
    constraints:
      -
        length:
          max: 16
          min: 3
      -
        allowed_pattern: "[a-zA-Z][a-zA-Z0-9]*"
        description: "db_username must begin with a letter and contain only alphanumeric characters"
    default: admin
    description: "Database admin account username"
    hidden: true
    type: string
  db_password: 
    constraints: 
      - 
        description: "admin account password  must be between 5 and 41 characters"
        length: 
          max: 41
          min: 5
      - 
        allowed_pattern: "[a-zA-Z0-9]*"
        description: "db_password must contain only alphanumeric characters"
    description: "Database admin account password"
    default: defpass
    hidden: true
    type: string
  db_root_password: 
    constraints: 
      - 
        description: "root password must be between 4 and 41 characters"
        length: 
          max: 41
          min: 4
      - 
        allowed_pattern: "[a-zA-Z0-9]*"
        description: "root password must contain only alphanumeric characters"
    description: "Root password for MySQL"
    hidden: true
    type: string
  volume_size: 
    constraints: 
      - 
        description: "must be between 1 and 1024 Gb."
        range: 
          max: 1024
          min: 1
    default: 1
    description: "Size of the volume to be created."
    type: number
  volume_type: 
    default: data
    description: "Type of volume to be used (encrypted or not)"
    type: string
  mountpoint: 
    default: /mnt/workingdir
    description: "The directory to provide to the user"
    type: string

resources: 
  my_instance: 
    type: OS::Nova::Server
    properties: 
      availability_zone: 
        get_param: availability_zone
      flavor: 
        get_param: instance_type
      image: PRISMA-Ubuntu-14.04-x86_64
      key_name: 
        get_param: key_name
      name: 
        get_param: vm_name
      networks: 
        - 
          port: 
            get_resource: my_instance_port
      user_data_format: RAW
      user_data: 
        str_replace: 
          params: 
            db_name: 
              get_param: db_name
            db_createuser:
              get_param: db_create_user
            db_password: 
              get_param: db_password
            db_rootpassword: 
              get_param: db_root_password
            db_user: 
              get_param: db_username
            device_name: /dev/vdb
            mountpoint: 
              get_param: mountpoint
            $wait_handle$: { get_resource: wait_condition_handle}

          template: |
              #!/bin/bash -v
              # Helper function to signal error condition
              function notify_err
               {
                message=$1
                curl -X PUT -H 'Content-Type:application/json' -d "{\"Status\" : \"FAILURE\",\"Reason\" : \"$message\",\"UniqueId\" : \"ID1\",\"Data\" : \"Server Configuration NOT OK\"}" \
                       "$wait_handle$"
                exit 1
               }

              sudo su -
              apt-get update
              export DEBIAN_FRONTEND=noninteractive
              apt-get -q -y install mysql-server
              # Setting bind address to mysql remote access
              sed -i "s/127.0.0.1/0.0.0.0/g" /etc/mysql/my.cnf
              service mysql restart
              service mysql stop
              #Allow user to use volume
              mkdir -p mountpoint
              mkfs.ext4 device_name && mount device_name mountpoint || notify_err "Some problems occurred with block device"
              echo "Successfully device mounted"
              
              #For reboot instance
              echo 'device_name mountpoint ext4 defaults 0 0' >> /etc/fstab
              chmod -R 0755 mountpoint
              #Change MySQL datadir
              cp -R -p /var/lib/mysql mountpoint/data
              chown -R mysql:mysql mountpoint/data
              sed -i "s:^datadir.*$:datadir\t\t= mountpoint/data:" /etc/mysql/my.cnf
              sed -i "s:/var/lib/mysql:mountpoint/data:g" /etc/apparmor.d/usr.sbin.mysqld
              /etc/init.d/apparmor reload
              /etc/init.d/apparmor restart
              mysql_install_db --datadir=mountpoint/data
              service mysql restart || notify_err "Some problems occurred with mysql installation/configuration"
              # Setup MySQL root password 
              mysqladmin -u root password db_rootpassword 
              # Create a user and the DB
              cat << EOF | mysql -u root --password=db_rootpassword
              CREATE DATABASE db_name;
              if [db_createuser = "create"]; then  
                GRANT ALL PRIVILEGES ON db_name.* TO "db_user"@"localhost" IDENTIFIED BY "db_password";
                GRANT ALL PRIVILEGES ON db_name.* TO "db_user"@"%" IDENTIFIED BY "db_password";
                FLUSH PRIVILEGES;
              fi
              EXIT
              EOF
              
              # Apache2 installation
              apt-get install -y apache2
              # PHP installation
              apt-get install -q -y php5 libapache2-mod-php5 php5-mcrypt
              # PHPMyAdmin installation
              echo 'phpmyadmin phpmyadmin/dbconfig-install boolean true' | debconf-set-selections
              echo "phpmyadmin phpmyadmin/app-password-confirm password db_rootpassword" | debconf-set-selections
              echo "phpmyadmin phpmyadmin/mysql/admin-pass password db_rootpassword" | debconf-set-selections
              echo "phpmyadmin phpmyadmin/mysql/app-pass password db_rootpassword" | debconf-set-selections
              echo 'phpmyadmin phpmyadmin/reconfigure-webserver multiselect apache2' | debconf-set-selections
              apt-get install -q -y phpmyadmin php5-mysql
              echo "Include /etc/phpmyadmin/apache.conf" >> /etc/apache2/apache2.conf
              php5enmod mcrypt 
              service apache2 restart || notify_err "Some problems occurred with phpmyadmin installation/configuration"
              
              # install init script links to configure service autostart at reboot 
              update-rc.d apache2 defaults
              update-rc.d mysql defaults

 
              # Zabbix agent installation
              echo "Zabbix Agent installation and configuration"
              wget http://repo.zabbix.com/zabbix/2.2/ubuntu/pool/main/z/zabbix-release/zabbix-release_2.2-1+trusty_all.deb
              dpkg -i zabbix-release_2.2-1+trusty_all.deb
              apt-get update              
              apt-get install -y zabbix-agent 
              zabbix_metrics="zabbix-metrics.infn.ponsmartcities-prisma.it"
              zabbix_watcher="zabbix-watcher.infn.ponsmartcities-prisma.it"
              sed -i -e "s/^Server=.*/Server=${zabbix_metrics},${zabbix_watcher}/" /etc/zabbix/zabbix_agentd.conf
              sed -i -e "s/^ServerActive=.*/ServerActive=${zabbix_metrics},${zabbix_watcher}/" /etc/zabbix/zabbix_agentd.conf
              sed -i -e "s/^Hostname=.*/Hostname=${HOSTNAME//./_}/" /etc/zabbix/zabbix_agentd.conf
              service zabbix-agent restart || notify_err "Some problems occurred with Zabbix Agent installation/configuration"
              
              # Puppet agent installation
              echo "Puppet agent installation and configuration"
              wget https://apt.puppetlabs.com/puppetlabs-release-trusty.deb
              dpkg -i puppetlabs-release-trusty.deb
              apt-get update
              apt-get install -y puppet
              puppetMaster="puppet-master.infn.ponsmartcities-prisma.it"
              puppet agent --server $puppetMaster --onetime --no-daemonize --verbose
              #[[ $? -eq 0 ]] || notify_err "Puppet agent failed. See logs for details"
              
              curl -X PUT -H 'Content-Type:application/json' -d '{"Status" : "SUCCESS","Reason" : "mysql and phpmyadmin installed OK","UniqueId" : "ID1","Data" : "Server Configuration OK"}' \
                       "$wait_handle$"     
              exit                

  wait_condition:
           type: AWS::CloudFormation::WaitCondition
           depends_on: my_instance
           properties:
            Count: 1
            Handle: { get_resource: wait_condition_handle }
            Timeout: 1800

  wait_condition_handle:
           type: AWS::CloudFormation::WaitConditionHandle

  cinder_volume:
    type: "OS::Cinder::Volume"
    properties:
      availability_zone:
        get_param: availability_zone
      size:
        get_param: volume_size
      volume_type:
        get_param: volume_type

  volume_attachment:
    type: "OS::Cinder::VolumeAttachment"
    properties:
      instance_uuid:
        get_resource: my_instance
      mountpoint: /dev/vdb
      volume_id:
        get_resource: cinder_volume

  my_instance_port: 
    type: "OS::Neutron::Port"
    properties: 
      network_id: 
        get_param: net_id
      security_groups: 
        get_param: security_groups 

outputs:
  instance_id:
    description: "Resource ID assigned to the newly created instance"
    value:
      get_resource: my_instance
  instance_ip:
    description: "Public IP address of the newly created Nova instance."
    value:
      get_attr:
        - my_instance
        - first_address
  manageURL:
    description: "phpMyAdmin can be accessed at"
    value:
      str_replace:
        params:
          host:
            get_attr:
              - my_instance
              - first_address
        template: "http://host/phpmyadmin"
  volume_id:
    description: "Resource ID assigned to the newly created volume attached to instance"
    value:
      get_resource: cinder_volume

