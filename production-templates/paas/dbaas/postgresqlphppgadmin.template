heat_template_version: 2013-05-23

description: Template to deploy a single user data instance (PostgreSQL 9.3 + PHPPgAdmin + change data directory)

parameters:
  key_name:
    type: string
    description: Name of a KeyPair
  vm_name:
    type: string
    label: VM name
  flavor:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used
    default: small.bronze
  availability_zone:
    type: string
    description: The Availability Zone to launch the instance.
    default: nova
  security_groups:
    type: comma_delimited_list
    description: List of security group names or IDs
    default: [ dbaas, zabbix ]
  networks:
    type: json
    description: ID of public (sub) network into which servers get deployed
  db_name:
    type: string
    constraints: 
      - 
        length: 
          max: 64
          min: 4
      - 
        allowed_pattern: "[a-zA-Z0-9-_]*"
        description: "db_name must contain only alphanumeric characters or _ or -"
    default: tempdatabase
    description: "Database name"
  db_username: 
    constraints: 
      - 
        length: 
          max: 16
          min: 3
      - 
        allowed_pattern: "[a-zA-Z][a-zA-Z0-9]*"
        description: "db_username must begin with a letter and contain only alphanumeric characters"
    default: admin
    description: "Database admin account username"
    hidden: true
    type: string
  db_password: 
    constraints: 
      - 
        description: "admin account password  must be between 5 and 41 characters"
        length: 
          max: 41
          min: 5
      - 
        allowed_pattern: "[a-zA-Z0-9]*"
        description: "db_password must contain only alphanumeric characters"
    description: "Database  account password"
    default: defpass
    hidden: true
    type: string
  db_root_password: 
    constraints: 
      - 
        description: "root password must be between 4 and 41 characters"
        length: 
          max: 41
          min: 4
      - 
        allowed_pattern: "[a-zA-Z0-9]*"
        description: "root password must contain only alphanumeric characters"
    description: "Root password for PostgreSQL"
    hidden: true
    type: string
  volume_size:
    constraints:
      -
        description: "must be between 1 and 1024 Gb."
        range:
          max: 1024
          min: 1
    default: 1
    description: "Size of the volume to be created."
    type: number
  volume_type:
    default: ""
    description: "Type of volume to be used (encrypted or not)"
    type: string
  mountpoint:
    default: /mnt/workingdir
    description: "The directory to provide to the user"
    type: string
  postgresql_port:
    default: 5432
    description: "The port for PostgreSQL server"
    type: number
  web_console_port:
    default: 80
    description: "The port for PostgreSQL web console (phpPgAdmin)"
    type: number
  zabbix_servers_dn:
    description: "A CSV list of Zabbix servers domain name"
    type: string
  puppet_server_dn:
    description: "The Puppet master domain name"
    type: string
  db_create_user:
    type: string
    label: db_create_user
    description: Flag for db_user creation
    constraints:
      - 
       allowed_values: [create,do_not_create]
    
resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      availability_zone:
        get_param: availability_zone
      flavor:
        get_param: flavor
      image: PRISMA-Ubuntu-14.04-x86_64
      key_name:
        get_param: key_name
      name:
        get_param: vm_name
      networks: { get_param: networks }
      security_groups: { get_param: security_groups }
      user_data_format: RAW
      user_data:
         str_replace:
          params:
            db_name:
              get_param: db_name
            db_password:
              get_param: db_password
            db_rootpassword:
              get_param: db_root_password
            db_user: 
              get_param: db_username
            db_createuser:
              get_param: db_create_user
            mountpoint: 
              get_param: mountpoint
            volume_id:
              get_resource: cinder_volume
            postgresql_port:
              get_param: postgresql_port
            web_console_port:
              get_param: web_console_port
            zabbix_servers_dn:
              get_param: zabbix_servers_dn
            puppet_server_dn:
              get_param: puppet_server_dn

            $wait_handle$: { get_resource: wait_condition_handle}

          template: |
            #!/bin/bash -v

            # Helper function to signal error condition
            function notify_err
            {
              message=$1
              curl -k -X PUT -H 'Content-Type:application/json' -d "{\"Status\" : \"FAILURE\",\"Reason\" : \"$message\",\"UniqueId\" : \"ID1\",\"Data\" : \"Server Configuration NOT OK\"}" \
              "$wait_handle$"
              exit 1
            }
            sudo su -

            # Configure the network interfaces, if needed
            interfaces=$(ip link show | grep -Eo "[1-9]: [a-z0-9]+:" | grep -Ev "(lo|eth0)" | cut -d: -f2)

            for i in ${interfaces[@]}; do
                if [ -e /etc/network/interfaces.d/eth0.cfg ]; then
                   sed "s/eth0/$i/g" /etc/network/interfaces.d/eth0.cfg  > /etc/network/interfaces.d/$i.cfg
                fi
                ifdown $i; ifup $i
            done

            useradd -s /bin/bash -m postgres
            echo "postgres:db_rootpassword" | chpasswd
            echo 'postgres ALL=(ALL) ALL' | sudo tee -a /etc/sudoers
            sed -i "s:^127.0.0.1:127.0.0.1 $HOSTNAME:" /etc/hosts
            apt-get update
            apt-get install -y openssh-server openssl bash libssl1.0.0
            
            #Install PostgreSQL  
            echo "deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main" >> /etc/apt/sources.list
            wget --quiet -O - http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add -
            apt-get install -y postgresql-9.3 postgresql-contrib
            service postgresql restart
            service postgresql stop

            #Allow user to use volume
            voldata_id=volume_id
            voldata_dev="/dev/disk/by-id/virtio-$(echo ${voldata_id} | cut -c -20)"
            mkdir -p mountpoint
            mkfs.ext4 ${voldata_dev} && mount ${voldata_dev} mountpoint || notify_err "Some problems occurred with block device"
            echo "Successfully device mounted"
            #For reboot instance
            echo "${voldata_dev} mountpoint ext4 defaults 0 0" >> /etc/fstab

            mkdir mountpoint/data
            chmod -R 0755 mountpoint
            
            #Change PostgreSQL default data directory
            pg_dropcluster 9.3 main
            pg_createcluster -d mountpoint/data --start-conf auto 9.3 main
            [[ $? -eq 0 ]] || notify_err "Some problems occurred while creating pg cluster"
            chown -R postgres:postgres mountpoint/data
            cp -R -p /etc/postgresql/9.3/main mountpoint/data
            ln -s mountpoint/data /etc/postgresql/9.3/main
            sed -i "s:^data_directory.*$:data_directory\t\t= 'mountpoint/data':" /etc/postgresql/9.3/main/postgresql.conf
            sed -i "s:port = 5432:port = postgresql_port:" /etc/postgresql/9.3/main/postgresql.conf
            # Configure Postgres Remote Access
            sed -i "s:^#listen_addresses = 'localhost':listen_addresses = '*':" /etc/postgresql/9.3/main/postgresql.conf
            echo "host    all             all             0.0.0.0/0               md5" | tee -a /etc/postgresql/9.3/main/pg_hba.conf
            service postgresql restart || notify_err "Some problems occurred with PostgreSQL installation"
            
            # Setup postgres password, create a user and db
            sudo -u postgres psql -c "alter role postgres password 'db_rootpassword';"
            if [[ "db_createuser" == "create" ]]; then  
              sudo -u postgres psql -c "create role db_user password 'db_password' SUPERUSER CREATEDB CREATEROLE INHERIT;" 
              sudo -u postgres createdb db_name -O db_user;
              sudo -u postgres psql -c "alter role db_user LOGIN;" 
            else
              sudo -u postgres createdb db_name;
            fi
 
            
            # Apache2 installation
            apt-get install -y apache2
            echo "ServerName localhost" | tee /etc/apache2/httpd.conf
            service apache2 restart
            # PHP installation
            apt-get install -q -y php5 libapache2-mod-php5 php5-mcrypt
            # phpPgAdmin installation
            apt-get install -q -y phppgadmin php5-pgsql
            sed -i "s:^allow from 127:#allow from 127:" /etc/apache2/conf.d/phppgadmin 
            sed -i "s/^#.*$allow from all/allow from all/" /etc/apache2/conf.d/phppgadmin
            cp /etc/apache2/conf.d/phppgadmin /etc/apache2/conf-available/phppgadmin.conf
            sed -i 's/\(^.*conf\[.extra_login_security.\] =\) true/\1 false/' /usr/share/phppgadmin/conf/config.inc.php
            sed -i "s:\$conf\['servers'\]\[0\]\['port'\] = 5432:\$conf['servers'][0]['port'] = postgresql_port:" /usr/share/phppgadmin/conf/config.inc.php
            sed -i "s:^post_max_size.*$:post_max_size = 20M:" /etc/php5/apache2/php.ini
            sed -i "s:^upload_max_filesize.*$:upload_max_filesize = 20M:" /etc/php5/apache2/php.ini
            a2enconf phppgadmin
            php5enmod mcrypt 
            service apache2 restart || notify_err "Some problems occurred with phppgadmin installation/configuration" 
            
            # install init script links to configure service autostart at reboot
            update-rc.d apache2 defaults
            update-rc.d postgresql defaults


            # Zabbix agent installation
            echo "Zabbix Agent setup"
            wget http://repo.zabbix.com/zabbix/2.2/ubuntu/pool/main/z/zabbix-release/zabbix-release_2.2-1+trusty_all.deb
            dpkg -i zabbix-release_2.2-1+trusty_all.deb
            apt-get update
            apt-get install -y zabbix-agent
            sed -i -e "s/^Server=.*/Server=zabbix_servers_dn/" /etc/zabbix/zabbix_agentd.conf
            sed -i -e "s/^ServerActive=.*/ServerActive=zabbix_servers_dn/" /etc/zabbix/zabbix_agentd.conf
            sed -i -e "s/^Hostname=.*/Hostname=${HOSTNAME//./_}/" /etc/zabbix/zabbix_agentd.conf
            service zabbix-agent restart || notify_err "Some problems occurred with Zabbix Agent setup"

            # Puppet agent installation
            echo "Puppet agent installation and configuration"
            wget https://apt.puppetlabs.com/puppetlabs-release-trusty.deb
            dpkg -i puppetlabs-release-trusty.deb
            apt-get update
            apt-get install -y puppet
            puppet agent --server puppet_server_dn --onetime --no-daemonize --verbose
            #[[ $? -eq 0 ]] || notify_err "Puppet agent failed. See logs for details"

            curl -k -X PUT -H 'Content-Type:application/json' -d '{"Status" : "SUCCESS","Reason" : "postgresql and phppgadmin installed OK","UniqueId" : "ID1","Data" : "Server Configuration OK"}' \
            "$wait_handle$"
            exit 0
            
  wait_condition:
           type: AWS::CloudFormation::WaitCondition
           depends_on: my_instance
           properties:
            Count: 1
            Handle: { get_resource: wait_condition_handle }
            Timeout: 1800

  wait_condition_handle:
           type: AWS::CloudFormation::WaitConditionHandle

  cinder_volume:
    type: "OS::Cinder::Volume"
    properties:
      availability_zone:
        get_param: availability_zone
      size:
        get_param: volume_size
      volume_type:
        get_param: volume_type

  volume_attachment:
    type: "OS::Cinder::VolumeAttachment"
    properties:
      instance_uuid:
        get_resource: my_instance
      mountpoint: null
      volume_id:
        get_resource: cinder_volume

    
outputs: 
  instance_id: 
    description: "Resource ID assigned to the newly created instance"
    value: 
      get_resource: my_instance

  instance_ips:
    description: The IP address of the deployed instance
    value: { get_attr: [my_instance, networks] }

  endpoints:
    description: "Service endpoints"
    value:
      "PostgreSQL":
        str_replace:
          params:
            host: { get_attr: [my_instance, first_address] }
            postgresql_port:
              get_param: postgresql_port
          template: "postgresql://host:postgresql_port"
      "phpPgAdmin":
        str_replace:
          params:
            host: { get_attr: [my_instance, first_address] }
            web_console_port:
              get_param: web_console_port
          template: "http://host:web_console_port/phppgadmin"



