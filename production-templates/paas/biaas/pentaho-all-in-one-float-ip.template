heat_template_version: 2013-05-23

description: Template to deploy a Pentaho Client with Data Integration and Report Design Tools

parameters:
  key_name:
    type: string
    description: Name of a KeyPair
  user_public_key:
    type: string
    description: public user key  
  vm_name:
    type: string
    label: VM name
  instance_type:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used
    default: large.bronze
  availability_zone:
    type: string
    description: The Availability Zone to launch the instance.
    default: nova
  ext_net_id:
    type: string
    description: ID of public sub network into which servers get deployed
  private_net_id:
    type: string
    description: ID of private sub network into which servers get deployed
  security_groups:
    type: comma_delimited_list
    description: List of security group names or IDs
    default: [biaas,zabbix]
  design_user:
    type: string
    description: Designer account username
    default: admin
  design_password:
    type: string
    description: Designer account password
    hidden: true
  admin_password:
    type: string
    description: Password for Administration
    hidden: true
  volume_size:
    type: number
    description: Size of the volume to be created.
    default: 10
  mountpoint:
    type: string
    description: The directory to provide to the user
    default: /mnt/workingdir
  volume_type:
    type: string
    description: Type of volume to be used (encrypted or not)
    default: ""

resources:
  postgres_root_passwd: 
    type: OS::Heat::RandomString
    properties:
      length: 10
  pentaho_user_passwd:
    type: OS::Heat::RandomString
    properties:
      length: 10
  user_data_instance:
    type: OS::Nova::Server
    properties:
      name: { get_param: vm_name }
      key_name: { get_param: key_name }
      image: PRISMA-Ubuntu-14.04-x86_64-Desktop
      flavor: { get_param: instance_type }
      availability_zone: { get_param: availability_zone }
      networks:
        - port: { get_resource: user_data_instance_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v
            # Helper function to signal error condition
            function notify_err
            {
             message=$1
             curl -X PUT -H 'Content-Type:application/json' -d "{\"Status\" : \"FAILURE\",\"Reason\" : \"$message\",\"UniqueId\" : \"ID1\",\"Data\" : \"Server Configuration NOT OK\"}" \
             "$wait_handle$"
             exit 1
            }
            sudo su -
            # Create Linux User Account
            useradd -s /bin/bash -m pentaho
            echo "pentaho:root_password" | chpasswd
            mkdir -p /home/pentaho/server/biserver-ce
            mkdir -p .pentaho
            mkdir -p /home/pentaho/client
            mkdir /home/pentaho/Desktop
            chown pentaho:pentaho /home/pentaho/Desktop
            chmod 755 /home/pentaho/Desktop
            sed -i "s:^127.0.0.1:127.0.0.1 $HOSTNAME:" /etc/hosts
            mkdir /home/pentaho/.ssh
            chmod 700 /home/pentaho/.ssh
            echo "user_public_key"  >> /home/pentaho/.ssh/authorized_keys
            chmod 600 /home/pentaho/.ssh/authorized_keys
            chown pentaho:pentaho /home/pentaho/.ssh
            chown pentaho:pentaho /home/pentaho/.ssh/authorized_keys
            apt-get update 
            apt-get install -y openssh-server openssl bash libssl1.0.0
            #install jdk
            apt-get install -y openjdk-7-jdk 
            echo 'JAVA_HOME="/usr/lib/jvm/java-1.7.0-openjdk-amd64"' >> /etc/environment
            #dowload and unzip pentaho server
            apt-get install -y zip unzip
            wget http://sourceforge.net/projects/pentaho/files/Business%20Intelligence%20Server/5.1/biserver-ce-5.1.0.0-752.zip
            unzip -n biserver-ce-5.1.0.0-752.zip -d /home/pentaho/server
            echo 'CATALINA_HOME="/home/pentaho/server/biserver-ce/tomcat"' >> /etc/environment
            # Edit tomcat-users.xml configuration file adding pentaho users
            sed -i "s|<tomcat-users>|<tomcat-users>\n<role rolename=\"manager-gui\"/>\n<role rolename=\"admin-gui\"/>\n<role rolename=\"PENTAHO_ADMIN\"/>\n<user username=\"admin\" password=\"admin_password\" roles=\"manager-gui,admin-gui\"/>|g" /home/pentaho/server/biserver-ce/tomcat/conf/tomcat-users.xml
            #Install PostgreSQL  
            echo "deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main" >> /etc/apt/sources.list
            wget --quiet -O - http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add -
            apt-get install -y postgresql-9.3 postgresql-contrib
            # Configure Postgres Remote Access
            sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" /etc/postgresql/9.3/main/postgresql.conf
            echo "host    all             all             0.0.0.0/0               md5" | tee -a /etc/postgresql/9.3/main/pg_hba.conf
            echo "local    all             pentaho_user                            md5" | tee -a /etc/postgresql/9.3/main/pg_hba.conf
            echo "local    all             hibuser                            md5" | tee -a /etc/postgresql/9.3/main/pg_hba.conf
            echo "local    all             jcr_user                            md5" | tee -a /etc/postgresql/9.3/main/pg_hba.conf
            service postgresql restart
            service postgresql stop
            #configure postgresql as BA repository DB
            sed -i "s/password/admin_password/g" /home/pentaho/server/biserver-ce/data/postgresql/create_quartz_postgresql.sql
            sed -i "s/password/admin_password/g" /home/pentaho/server/biserver-ce/data/postgresql/create_repository_postgresql.sql
            sed -i "s/password/admin_password/g" /home/pentaho/server/biserver-ce/data/postgresql/create_jcr_postgresql.sql
            sed -i "s|connect.*$|connect quartz postgres|g" /home/pentaho/server/biserver-ce/data/postgresql/create_quartz_postgresql.sql
            sed -i "s|connect.*$|connect quartz postgres|g" /home/pentaho/server/biserver-ce/data/postgresql/create_repository_postgresql.sql
            sed -i "s|connect.*$|connect quartz postgres|g" /home/pentaho/server/biserver-ce/data/postgresql/create_jcr_postgresql.sql

            #Allow user to use volume
            mkdir -p mountpoint
            mkfs.ext4 device_name && mount device_name mountpoint || notify_err "Some problems occurred with block device"
            echo "Successfully device mounted"
            echo 'device_name mountpoint ext4 defaults 0 0' >> /etc/fstab
            mkdir mountpoint/data
            chmod -R 0755 mountpoint

            #Change PostgreSQL default data directory
            pg_dropcluster 9.3 main
            pg_createcluster -e UTF-8 -d mountpoint/data --start-conf auto 9.3 main
            [[ $? -eq 0 ]] || notify_err "Some problems occurred creation pg cluster"
            chown -R postgres:postgres mountpoint/data
            cp -R -p /etc/postgresql/9.3/main mountpoint/data
            ln -s mountpoint/data /etc/postgresql/9.3/main
            sed -i "s:^data_directory.*$:data_directory\t\t= 'mountpoint/data':" /etc/postgresql/9.3/main/postgresql.conf
            service postgresql restart || notify_err "Some problems occurred with postgres installation/configuration"
            
            # Setup postgres password
            sudo -u postgres psql -c "alter role postgres password 'db_rootpassword';" 
            sudo -u postgres psql -a -f /home/pentaho/server/biserver-ce/data/postgresql/create_quartz_postgresql.sql
            sudo -u postgres psql -d quartz -c "CREATE TABLE \"QRTZ\" (name VARCHAR(200) NOT NULL, PRIMARY KEY (name)); ALTER TABLE \"QRTZ\" OWNER TO pentaho_user;" 
            sudo -u postgres psql -a -f /home/pentaho/server/biserver-ce/data/postgresql/create_repository_postgresql.sql
            sudo -u postgres psql -a -f /home/pentaho/server/biserver-ce/data/postgresql/create_jcr_postgresql.sql
            
            #Configuring the context.xml with postgresql jdbc configuration, user and password
            sed -i "s|docbase=".*$"|docbase=\"/home/pentaho/server/biserver-ce/tomcat/webapps/pentaho/\">|g" /home/pentaho/server/biserver-ce/tomcat/webapps/pentaho/META-INF/context.xml
            sed -i "s|org.hsqldb.jdbcDriver|org.postgresql.Driver|g" /home/pentaho/server/biserver-ce/tomcat/webapps/pentaho/META-INF/context.xml
            sed -i "s|factory=".*$"|factory=\"org.apache.commons.dbcp.BasicDataSourceFactory\"|g" /home/pentaho/server/biserver-ce/tomcat/webapps/pentaho/META-INF/context.xml
            sed -i "s|password=".*$"|password=\"admin_password\"|g" /home/pentaho/server/biserver-ce/tomcat/webapps/pentaho/META-INF/context.xml
            sed -i "s|jdbc:hsqldb:hsql:\/\/localhost\/hibernate|jdbc:postgresql:\/\/localhost:5432\/hibernate|g" /home/pentaho/server/biserver-ce/tomcat/webapps/pentaho/META-INF/context.xml
            sed -i "s|select count.*$|select 1\" \/>|g" /home/pentaho/server/biserver-ce/tomcat/webapps/pentaho/META-INF/context.xml
            
            #import already ad-hoc modified version of web.xml file fo Filter/Listner configuration
            mv /home/pentaho/server/biserver-ce/tomcat/webapps/pentaho/WEB-INF/web.xml /home/pentaho/server/biserver-ce/tomcat/webapps/pentaho/WEB-INF/web.xml.OLD
            wget http://ip_repo/web.xml -O /home/pentaho/server/biserver-ce/tomcat/webapps/pentaho/WEB-INF/web.xml
            [[ $? -eq 0 ]] || notify_err "Some problems occurred with ip repository for pentaho"
            
            #import already ad-hoc modified version of repository.xml file to PostgreSQL configuration
            mv /home/pentaho/server/biserver-ce/pentaho-solutions/system/jackrabbit/repository.xml /home/pentaho/server/biserver-ce/pentaho-solutions/system/jackrabbit/repository.xml.OLD
            wget http://ip_repo/repository.xml -O /home/pentaho/server/biserver-ce/pentaho-solutions/system/jackrabbit/repository.xml
            
            #Configuring the repository.xml with postgresql user password
            sed -i "s/value=\"password/value=\"admin_password/g" /home/pentaho/server/biserver-ce/pentaho-solutions/system/jackrabbit/repository.xml
            
            # Change the hibernate config files
            sed -i "s|system\/hibernate\/hsql.hibernate.cfg.xml|system\/hibernate\/postgresql.hibernate.cfg.xml|g" /home/pentaho/server/biserver-ce/pentaho-solutions/system/hibernate/hibernate-settings.xml
            sed -i "s|org.hsqldb.jdbcDriver|org.postgresql.Driver|g" /home/pentaho/server/biserver-ce/pentaho-solutions/system/applicationContext-spring-security-hibernate.properties
            sed -i "s|jdbc:hsqldb:hsql:\/\/localhost:9001\/hibernate|jdbc:postgresql:\/\/localhost:5432\/hibernate|g" /home/pentaho/server/biserver-ce/pentaho-solutions/system/applicationContext-spring-security-hibernate.properties
            sed -i "s/=password/=admin_password/g" /home/pentaho/server/biserver-ce/pentaho-solutions/system/applicationContext-spring-security-hibernate.properties
            sed -i "s/=password/=admin_password/g" /home/pentaho/server/biserver-ce/pentaho-solutions/system/dialects/postgresql/applicationContext-spring-security-hibernate.properties
            
            # Configuring the Quartz Scheduler for PostgreSQL
            sed -i "s|#.*$org.quartz.jobStore.driverDelegateClass.*$|org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.PostgreSQLDelegate|g" /home/pentaho/server/biserver-ce/pentaho-solutions/system/quartz/quartz.properties
            
            # Disable quartz embedded listner
            sed -i "s|<bean id=\"quartzSystemListener\" class=\"org.pentaho.platform.scheduler2.quartz.EmbeddedQuartzSystemListener\" \/>|<!-- \n <bean id=\"quartzSystemListener\" class=\"org.pentaho.platform.scheduler2.quartz.EmbeddedQuartzSystemListener\" \/> \n -->|g" /home/pentaho/server/biserver-ce/pentaho-solutions/system/systemListeners.xml
            # Disable suggestion of pentaho user
            sed -i "s|<login-show-users-list>true</login-show-users-list>|<login-show-users-list>false</login-show-users-list>|g" /home/pentaho/server/biserver-ce/pentaho-solutions/system/pentaho.xml
            sed -i "s|<login-show-sample-users-hint>true</login-show-sample-users-hint>|<login-show-sample-users-hint>false</login-show-sample-users-hint>|g" /home/pentaho/server/biserver-ce/pentaho-solutions/system/pentaho.xml
            sed -i "s|<login-show-users-list>true</login-show-users-list>|<login-show-users-list>false</login-show-users-list>|g" /home/pentaho/server/biserver-ce/pentaho-solutions/system/applicationContext-spring-security-memory.xml
            # Increase the CSV File Upload Limit
            sed -i "s/<max-file-limit>10000000/<max-file-limit>10000000000/g" /home/pentaho/server/biserver-ce/pentaho-solutions/system/pentaho.xml
            sed -i "s/<max-folder-limit>500000000/<max-folder-limit>500000000000/g" /home/pentaho/server/biserver-ce/pentaho-solutions/system/pentaho.xml
            # Enable JPivot in the User Console
            sed -i "s|<show-deprecation-warning>.$*|<show-deprecation-warning>false</show-deprecation-warning>|g" /home/pentaho/server/biserver-ce/pentaho-solutions/system/pentaho-jpivot-plugin/settings.xml
            #Customise Login
            cp /home/pentaho/server/biserver-ce/pentaho-solutions/system/common-ui/resources/themes/crystal/images/login-crystal-bg.jpeg /home/pentaho/server/biserver-ce/pentaho-solutions/system/common-ui/resources/themes/crystal/images/login-crystal-bgOLD.jpeg
            wget http://ip_repo/login-crystal-bg.jpg -O /home/pentaho/server/biserver-ce/pentaho-solutions/system/common-ui/resources/themes/crystal/images/login-crystal-bg.jpeg

            #Install Saiku Plugin
            wget http://www.meteorite.bi/downloads/saiku-plugin-p5-2.6.zip
            unzip -n saiku-plugin-p5-2.6.zip -d /home/pentaho/server/biserver-ce/pentaho-solutions/system/

            #import already ad-hoc created file /etc/init.d/pentaho
            wget http://ip_repo/pentaho -O /etc/init.d/pentaho
            #import already ad-hoc modified version of start-pentaho.sh
            mv /home/pentaho/server/biserver-ce/start-pentaho.sh /home/pentaho/server/biserver-ce/start-pentaho.sh.OLD
            wget http://ip_repo/start-pentaho.sh -O /home/pentaho/server/biserver-ce/start-pentaho.sh
            chmod 777 /home/pentaho/server/biserver-ce/*.sh
            chmod +x /etc/init.d/pentaho
            update-rc.d pentaho defaults
            #For Reboot to restart Pentaho
            sed -i "s/\"exit 0\"/exit/g" /etc/rc.local 
            sed -i "s/exit 0/sh \/home\/pentaho\/server\/biserver-ce\/start-pentaho.sh\nexit 0/g" /etc/rc.local
            # Driver JDBC (default postgresql 9.1, mysql 5.1, hsqldb e h2)
            wget -O /usr/share/java/postgresql-9.2-1003.jdbc4.jar jdbc.postgresql.org/download/postgresql-9.2-1003.jdbc4.jar
            ln -s /usr/share/java/postgresql-9.2-1003.jdbc4.jar /usr/share/java/postgresql-9.2-jdbc4.jar
            ln -s /usr/share/java/postgresql-9.2-jdbc4.jar /home/pentaho/server/biserver-ce/tomcat/lib/postgresql-9.2-jdbc4.jar
            ## install init script links to configure service autostart at reboot 
            #Start Tomcat and Pentaho BA server
            chmod 777 /home/pentaho/server/biserver-ce/*.sh
            chmod 770 /home/pentaho/server/biserver-ce/tomcat/lib/*
            chmod 777 /home/pentaho/server/biserver-ce/tomcat/bin/*.sh
            /home/pentaho/server/biserver-ce/start-pentaho.sh
            #Checking that pentaho/tomcat service is up before to run curl command
            MY_CHECK=4
            while (( $MY_CHECK )); do
            wget http://127.0.0.1:8080/pentaho
            if [ $? -eq 0 ]; then 
              MY_CHECK=$?
            else
              let MY_CHECK-=1
            fi
            sleep 5;
            done
            # Delete default user pat, suzy, tiffany
            curl -u admin:password -X PUT -H"Content-Type: application/json" http://127.0.0.1:8080/pentaho/api/userroledao/deleteUsers?userNames=tiffany
            curl -u admin:password -X PUT -H"Content-Type: application/json" http://127.0.0.1:8080/pentaho/api/userroledao/deleteUsers?userNames=pat
            curl -u admin:password -X PUT -H"Content-Type: application/json" http://127.0.0.1:8080/pentaho/api/userroledao/deleteUsers?userNames=suzy
            [[ $? -eq 0 ]] || notify_err "Some problems occurred with ip http://127.0.0.1:8080/pentaho"
            # change default admin password
            curl -u admin:password -X PUT -H"Content-Type: application/json" -d '{"userName": "admin", "password" : "admin_password"}' http://127.0.0.1:8080/pentaho/api/userroledao/updatePassword


            #Install x2go
            sudo add-apt-repository ppa:x2go/stable
            sudo apt-get update
            sudo apt-get install -y x2goserver x2goserver-xsession
            #Install zip e unzip
            apt-get install -y zip unzip 
            # Install jdk
            apt-get install -y openjdk-7-jdk
            su root -c "echo 'export PENTAHO_JAVA_HOME=\"/usr/lib/jvm//java-7-openjdk-amd64\"' >> /etc/environment" 
            # Install Pentaho Report Designer
            wget http://downloads.sourceforge.net/project/pentaho/Report%20Designer/5.1/prd-ce-5.1.0.0-752.zip
            [[ $? -eq 0 ]] || notify_err "Some problems occurred with Install Pentaho Report Designer"
            unzip -n prd-ce-5.1.0.0-752.zip -d /home/pentaho/client
            # Install Pentaho Data Integration (Kettle)
            wget http://downloads.sourceforge.net/project/pentaho/Data%20Integration/5.1/pdi-ce-5.1.0.0-752.zip
            [[ $? -eq 0 ]] || notify_err "Some problems occurred with Install Pentaho Data Integration "
            unzip -n pdi-ce-5.1.0.0-752.zip -d /home/pentaho/client
            # Install Postgresql driver
            wget -O /home/pentaho/client/report-designer/lib/jdbc/postgresql-9.2-1003.jdbc4.jar jdbc.postgresql.org/download/postgresql-9.2-1003.jdbc4.jar
            [[ $? -eq 0 ]] || notify_err "Some problems occurred with Install Postgresql driver "
            #Install Mysql Driver
            wget http://www.java2s.com/Code/JarDownload/mysql/mysql-connector-java-5.1.17-bin.jar.zip
            [[ $? -eq 0 ]] || notify_err "Some problems occurred with Install Mysql driver "
            unzip -n mysql-connector-java-5.1.17-bin.jar.zip -d /home/pentaho/client/report-designer/lib/jdbc/ 
            unzip -n mysql-connector-java-5.1.17-bin.jar.zip -d /home/pentaho/client/data-integration/lib/  
            # Configure existing Pentaho server as Report Designer Repository (IP:8080/pentaho is the default configuration)
            #sed -i "s|localhost|ip_server_bi|g" /home/pentaho/client/report-designer/resources/classic-engine.properties
            sed -i "s|Designer|design_user|g" /home/pentaho/client/report-designer/resources/classic-engine.properties
            sed -i "s|roles=None|roles=manager-gui,admin-gui|g" /home/pentaho/client/report-designer/resources/classic-engine.properties
            sed -i "s|password|design_password|g" /home/pentaho/client/report-designer/resources/report-designer.properties
            #sed -i "s|localhost|ip_server_bi|g" /home/pentaho/client/report-designer/resources/report-designer.properties
            # Set configuration for better performance
            sed -i "s|-XX:MaxPermSize=512m|-XX:MaxPermSize=512m -Xmx1024M|g" /home/pentaho/client/report-designer/report-designer.sh
            # Create desktop icon for App launching
            cat << EOF > /usr/share/applications/pentaho-prd.desktop
            [Desktop Entry]
            Version=1.0
            Name=Pentaho-Reporting
            Comment=Pentaho Reporting App
            Exec=/usr/bin/launch_pentaho_report.sh
            Icon=/home/pentaho/client/data-integration/docs/English/welcome/img/header-image-1.png
            Terminal=false
            Type=Application
            Categories=Utility;Application;
            EOF
            ########
            cat << EOF > /usr/share/applications/pentaho-pdi.desktop
            [Desktop Entry]
            Version=1.0
            Name=Pentaho-Data-Integration
            Comment=Pentaho ETL App
            Exec=/usr/bin/launch_pentaho_pdi.sh
            Icon=/home/pentaho/client/data-integration/docs/English/welcome/img/header-image-2.png
            Terminal=false
            Type=Application
            Categories=Utility;Application;
            EOF
            #######
            cat << EOF > /usr/bin/launch_pentaho_report.sh
            #!/bin/bash
            unset PENTAHO_JAVA_HOME PENTAHO_JAVA
            cd /home/pentaho/client/report-designer
            ./report-designer.sh
            EOF
            #######
            cat << EOF > /usr/bin/launch_pentaho_pdi.sh
            #!/bin/bash
            unset PENTAHO_JAVA_HOME PENTAHO_JAVA
            cd /home/pentaho/client/data-integration
            ./spoon.sh
            EOF
            cp -f /usr/share/applications/pentaho-pdi.desktop /home/pentaho/Desktop/pentaho-pdi.desktop
            chown pentaho:pentaho /home/pentaho/Desktop/pentaho-pdi.desktop
            chmod +x /home/pentaho/Desktop/pentaho-pdi.desktop
            chmod 755 /usr/bin/launch_pentaho_pdi.sh
            cp -f /usr/share/applications/pentaho-prd.desktop /home/pentaho/Desktop/pentaho-prd.desktop
            chown pentaho:pentaho /home/pentaho/Desktop/pentaho-prd.desktop
            chmod +x /home/pentaho/Desktop/pentaho-prd.desktop
            chmod 755 /usr/bin/launch_pentaho_report.sh

            # Zabbix agent installation
            echo "Zabbix Agent installation and configuration"
            wget http://repo.zabbix.com/zabbix/2.2/ubuntu/pool/main/z/zabbix-release/zabbix-release_2.2-1+trusty_all.deb
            dpkg -i zabbix-release_2.2-1+trusty_all.deb
            apt-get update
            apt-get install -y zabbix-agent
            zabbix_metrics="zabbix-metrics.infn.ponsmartcities-prisma.it"
            zabbix_watcher="zabbix-watcher.infn.ponsmartcities-prisma.it"
            sed -i -e "s/^Server=.*/Server=${zabbix_metrics},${zabbix_watcher}/" /etc/zabbix/zabbix_agentd.conf
            sed -i -e "s/^ServerActive=.*/ServerActive=${zabbix_metrics},${zabbix_watcher}/" /etc/zabbix/zabbix_agentd.conf
            sed -i -e "s/^Hostname=.*/Hostname=${HOSTNAME//./_}/" /etc/zabbix/zabbix_agentd.conf
            service zabbix-agent restart || notify_err "Some problems occurred with Zabbix Agent installation/configuration"

            curl -X PUT -H 'Content-Type:application/json' -d '{"Status" : "SUCCESS","Reason" : "BI Client Tools and BI Server installed OK","UniqueId" : "ID1","Data" : "Server Configuration OK"}' \
            "$wait_handle$" 
            exit 0
          params:
            db_rootpassword: {get_attr: [postgres_root_passwd, value]}
            root_password: {get_attr: [pentaho_user_passwd, value]}
            admin_password: { get_param: admin_password } 
            ip_repo: cloudrepo.cloud.ba.infn.it
            design_user: { get_param: design_user }
            design_password: { get_param: design_password }
            mountpoint: { get_param: mountpoint }
            device_name: /dev/vdb
            $wait_handle$: { get_resource: wait_condition_handle}
            user_public_key: { get_param: user_public_key }

  wait_condition:
    type: AWS::CloudFormation::WaitCondition
    depends_on: user_data_instance
    properties:
     Count: 1
     Handle: { get_resource: wait_condition_handle }
     Timeout: 7000

  wait_condition_handle:
           type: AWS::CloudFormation::WaitConditionHandle

  cinder_volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      availability_zone: { get_param: availability_zone }
      volume_type: { get_param: volume_type }
  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: cinder_volume }
      instance_uuid: { get_resource: user_data_instance }
      mountpoint: /dev/vdb

  user_data_instance_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_net_id }
      security_groups: { get_param: security_groups }

  user_data_instance_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: ext_net_id }
      port_id: { get_resource: user_data_instance_port }

outputs:
  instance_public_ip:
    description: Floating IP address of deployed instance in public network
    value: { get_attr: [ user_data_instance_floating_ip, floating_ip_address ] }
  instance_id:
    description: Resource ID assigned to the newly created instance
    value: { get_resource: user_data_instance }
  manage_url: 
    description: Pentaho BI Community Edition can be accessed at 
    value:
      str_replace:
        template: http://host:8080/pentaho
        params:
          host: { get_attr: [ user_data_instance_floating_ip, floating_ip_address ] }
  postgres_root_passwd:
    description: Password for PostgreSQL root user 
    value: {  get_resource: postgres_root_passwd }
  pentaho_user_passwd:
    description: Password for pentaho Linux user  
    value: { get_resource: pentaho_user_passwd} 

        



